{
  "asyncapi": "2.0.0",
  "id": "https://www.asyncapi.com",
  "defaultContentType": "application/json",
  "info": {
    "title": "AsyncApi sample",
    "version": "2.0",
    "description": "short description",
    "termsOfService": "https://www.asyncapi.com/about/",
    "contact": {
      "name": "AsyncApi",
      "url": "https://www.asyncapi.com",
      "email": "java@asyncapi.com"
    },
    "license": {
      "name": "Apache License 2.0",
      "url": "http://www.apache.org/licenses/"
    }
  },
  "servers": {
    "stage": {
      "url": "{username}.gigantic-server.com:{port}/{basePath}",
      "protocol": "secure-mqtt",
      "protocolVersion": "5",
      "description": "The production API server",
      "variables": {
        "username": {
          "default": "demo",
          "description": "This value is assigned by the service provider, in this example `gigantic-server.com`"
        },
        "port": {
          "enum": [
            "8883",
            "8884"
          ],
          "default": "8883"
        }
      },
      "security": [
        {
          "mqttBroker": []
        }
      ],
      "bindings": {
        "amqp1": {},
        "anypointmq": {},
        "googlepubsub": {},
        "http": {},
        "ibmmq": {
          "groupId": "PRODCLSTR1",
          "ccdtQueueManagerName": "*",
          "multiEndpointServer": false,
          "heartBeatInterval": 300,
          "cipherSpec": "ANY_TLS12_OR_HIGHER",
          "bindingVersion": "0.1.0"
        },
        "jms": {},
        "kafka": {
          "schemaRegistryUrl": "https://my-schema-registry.com",
          "schemaRegistryVendor": "confluent",
          "bindingVersion": "0.4.0"
        },
        "mercure": {},
        "mqtt": {
          "clientId": "guest",
          "cleanSession": true,
          "lastWill": {
            "topic": "/last-wills",
            "qos": 2,
            "message": "Guest gone offline.",
            "retain": false
          },
          "keepAlive": 60,
          "bindingVersion": "0.1.0"
        },
        "mqtt5": {
          "sessionExpiryInterval": 60,
          "bindingVersion": "0.2.0"
        },
        "nats": {},
        "pulsar": {
          "tenant": "contoso",
          "bindingVersion": "0.1.0"
        },
        "redis": {},
        "sns": {},
        "solace": {
          "msgVpn": "solace.private.net",
          "bindingVersion": "0.3.0"
        },
        "sqs": {},
        "stomp": {},
        "ws": {}
      }
    }
  },
  "channels": {
    "channelName": {
      "description": "This channel is used to exchange messages about users signing up",
      "subscribe": {
        "summary": "A user signed up.",
        "message": {
          "description": "A longer description of the message",
          "payload": {
            "type": "object",
            "properties": {
              "user": {
                "$ref": "#/components/schemas/user"
              },
              "signup": {
                "$ref": "#/components/schemas/signup"
              }
            }
          }
        }
      },
      "parameters": {
        "param1": {
          "$ref": "#/components/operationTraits/kafka"
        },
        "param2": {
          "description": "Id of the user.",
          "schema": {
            "type": "string"
          },
          "location": "$message.payload#/user/id"
        }
      },
      "bindings": {
        "amqp": {
          "is": "queue",
          "queue": {
            "exclusive": true
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "User": {
        "$ref": "#/components/schemas/user"
      }
    },
    "messages": {
      "userSignUp": {
        "summary": "Action to sign a user up.",
        "description": "Multiline description of what this action does.\nHere you have another line.\n",
        "tags": [
          {
            "name": "user"
          },
          {
            "name": "signup"
          }
        ],
        "headers": {
          "type": "object",
          "properties": {
            "applicationInstanceId": {
              "description": "Unique identifier for a given instance of the publishing application",
              "type": "string"
            }
          }
        },
        "payload": {
          "type": "object",
          "properties": {
            "user": {
              "$ref": "#/components/schemas/userCreate"
            },
            "signup": {
              "$ref": "#/components/schemas/signup"
            }
          }
        }
      },
      "userSignOut": {
        "$ref": "#/components/schemas/userSignOut"
      }
    },
    "securitySchemes": {
      "1": {
        "type": "userPassword"
      },
      "2": {
        "$ref": "#/components/schemas/2"
      }
    },
    "parameters": {
      "userId": {
        "description": "Id of the user.",
        "schema": {
          "type": "string"
        },
        "location": "$message.payload#/user/id"
      },
      "userKey": {
        "$ref": "$message.payload#/user/key"
      }
    },
    "correlationIds": {
      "default": {
        "description": "Default Correlation ID",
        "location": "$message.header#/correlationId"
      }
    },
    "messageTraits": {
      "commonHeaders": {
        "headers": {
          "type": "object",
          "properties": {
            "my-app-header": {
              "type": "integer",
              "minimum": 0,
              "maximum": 100
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "user",
      "description": "User-related messages",
      "externalDocs": {
        "description" : "Find more info here",
        "url" : "https://example.com"
      }
    }
  ],
  "externalDocs": {
    "description": "Find more info here",
    "url": "https://example.com"
  }
}
